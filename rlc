#! /bin/sh

# ================================ #
#     author: Pavlo Rozbytskyi     #
#     date  : 16.04.2019           #
# ================================ #

HELP_MESSAGE="See correct program usage: rlc [-c NUM] [-n] file1 [file2 ...]"
GET_OPT_TEMPLATE=":c:nh"
C_OPTION=0
N_OPTION=0
NUM_VALUE=
LINES_COUNTER=1

# ============= FUNCTIONS =============== #

# checking file is empty
# $1 is filename
# returns zero if file is empty 
check_file_empty () {
    if [ ! -s $1 ]; then
        printf "Error: file \"$1\" is empty!\n" >&2  
        return 255
    fi  

    return 0
}

# checking string contains number
# $1 is string to check
check_number () {
    if test "$1" -eq "$1" 2>/dev/null; then
        return 0
    else
        return 255
    fi
}
# $1 is previous line 
# $2 is current line
#
# returns 0 if equal and 1 if not 
check_equal_lines () {
    if [ "X$1" = "X$2" ]; then
        return 0
    else
        return 1
    fi
}

# checking which options are set
# return values: 
# 1   - both options set 
# 2   - c option set 
# 3   - n option set 
# 255 - no option set 
check_which_option_set () {
    if [ ${N_OPTION} -eq 1 ] && [ ${C_OPTION} -eq 1 ]; then
        return 1
    elif [ ${C_OPTION} -eq 1 ]; then
        return 2
    elif [ ${N_OPTION} -eq 1 ]; then
        return 3
    else
        return 4
    fi
}

# printing line for both options
# $1 - line to print
print_line_both_opts () {
    if [ ${LINES_COUNTER} -eq ${NUM_VALUE} ]; then
        printf "%d %s\n" ${LINES_COUNTER} $1
    fi
}

# printing line for n option
# $1 - line to print
print_line_n_opt () {
    printf "%d %s\n" ${LINES_COUNTER} $1
}

# printing line for c option
# $1 - line to print
print_line_c_opt () {
    if [ ${LINES_COUNTER} -eq ${NUM_VALUE} ]; then
        printf "%s\n" $1
    fi
}

# $1 line to print
print_line () {
    check_which_option_set

    case "$?" in
        1)
            print_line_both_opts "$1"
            ;;
        2) 
            print_line_c_opt "$1"
            ;;
        3) 
            print_line_n_opt "$1"
            ;;
        4) 
            printf "%s\n" "$1"
            ;;
    esac
}

# startig file processing
# $1 is file name
process_file () {

    {
        PREV_LINE=
        CURRENT_LINE=

        IFS= read -r PREV_LINE
        while IFS= read -r CURRENT_LINE; do
            check_equal_lines ${PREV_LINE} ${CURRENT_LINE}

            if [ $? -eq 1 ]; then
                print_line ${PREV_LINE}
                LINES_COUNTER=1
            else    
                LINES_COUNTER=$(( LINES_COUNTER + 1 ))
            fi

            PREV_LINE=$CURRENT_LINE
        done

        check_equal_lines ${PREV_LINE} ${CURRENT_LINE}
        if [ $? -eq 1 ]; then
            print_line ${PREV_LINE}
            LINES_COUNTER=1
            print_line ${CURRENT_LINE}
        else    
            LINES_COUNTER=$(( LINES_COUNTER + 1 ))
            print_line ${CURRENT_LINE}
        fi

    } < $1
}
# ============== END FUNCTIONS ================= #

# parsing options 
while getopts "${GET_OPT_TEMPLATE}" option;
do 
    case ${option} in
        c ) 
            NUM_VALUE=$OPTARG

            check_number ${NUM_VALUE}
            if [ ! $? -eq 0 ]; then
                printf "Error: %s is not number! Check how to use script\n" ${NUM_VALUE} >&2
                printf "${HELP_MESSAGE}\n"
                exit 255
            fi

            C_OPTION=1
            ;;
        n )
            N_OPTION=1
            ;;
        h ) 
            printf "${HELP_MESSAGE} \n"
            exit 0
            ;;
        \? )
            printf "${HELP_MESSAGE} \n"
            exit 0
            ;;
    esac
done

# shifting processed options 
shift $((OPTIND - 1))

# checking file names
if [ $# -lt 1 ];
then 
    printf "%s\n" "Error: program should be called with at least one file name" >&2
    exit 0
fi

# iterating files
printf "%s\n" "starting script:"
printf "%s\n" "--------------------------"
for file in "$@";
do 
    check_file_empty ${file}

    if [ $? -eq 0 ]; then
        printf "Processing file \"%s\"\n" ${file}
        printf "%s\n" "--------------------------"

        process_file ${file}
        printf "%s\n" "--------------------------"
    fi
done

printf "%s\n" "--------------------------"
printf "%s\n" "terminating script!"
