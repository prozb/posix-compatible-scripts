#! /bin/sh

# ###############################################
# @brief: checking stdin word is palindrome     #
#         using just POSIX standard tools       #
#          @author: Pavlo Rozbytskyi            #
#          @date: 23/04/2019                    #    
# ###############################################

# checking letter lowercase and return uppercase
switch_to_uppercase () {
    char="$1"

    case $char in
        a) char=A;;  h) char=H;;  o) char=O;;  u) char=U;;  
        b) char=B;;  i) char=I;;  p) char=P;;  v) char=V;;  
        c) char=C;;  j) char=J;;  q) char=Q;;  w) char=W;;  
        d) char=D;;  k) char=K;;  r) char=R;;  x) char=X;;  
        e) char=E;;  l) char=L;;  s) char=S;;  y) char=Y;;  
        f) char=F;;  m) char=M;;  t) char=T;;  z) char=Z;;  
        g) char=G;;  n) char=N;;  
    esac

    printf "${char}"
}
# checking two symbols are equal case insensitive 
# 
# returns 0 if equals and 255 if not
check_sym_equals () {
    sym_1="$1"
    sym_2="$2"

    # switching to uppercase first sym
    case "$sym_1" in 
        [[:alpha:]]) 
            sym_1=$(switch_to_uppercase "$sym_1")
        ;;
    esac
    # switching to uppercase second sym
    case "$sym_2" in 
        [[:alpha:]]) 
            sym_2=$(switch_to_uppercase "$sym_2")
        ;;
    esac

    if [ "X${sym_1}" = "X${sym_2}" ]; then 
        return 0
    fi

    return 255
}
# check argument $1 is not special symbol
check_not_spec_symbol () {
    sym="$1"

    case "$sym" in 
    [[:alnum:]]) 
        return 0
        ;;
    *)
        return 255
        ;;
    esac
}

# checking argument $1 is palindrom
palindrome () {
    word="$1"
    len=${#word}

    while [ "$len" -gt 1 ]; do
        # skipping special symbols on start
        start_sym=
        while true; do 
            # check there are enough symbols in word
            if [ "${len}" -lt 2 ]; then
                return 0
            fi

            start_sym=${word:0:1}
            word=${word:1:len}
            len=${#word}

            check_not_spec_symbol "$start_sym"
            # stop loop if symbol is not special
            if [ "$?" -eq 0 ]; then
                break
            fi
        done
        # skipping special symbols on the end
        end_sym=
        len=${#word}
        while true; do
            # check there are enough symbols
            if [ ${len} -lt 1 ]; then 
                return 0
            fi

            len=$(( len - 1 ))
            end_sym=${word:len:1}
            word=${word:0:len}
            check_not_spec_symbol "$end_sym"
             # stop loop if symbol is not special
            if [ "$?" -eq 0 ]; then
                break
            fi
        done

        check_sym_equals "$end_sym" "$start_sym"
        # stop loop if first and last symbols aren't equal
        if [ "$?" -ne 0 ]; then
            return 255
        fi
        
        len=${#word}
    done

    return 0
}

word=
while read word; do
    word_copy="${word}"
    palindrome "${word}"

    if [ "$?" -eq 0 ]; then
        printf "%s\n" "${word_copy}"
    fi
done


